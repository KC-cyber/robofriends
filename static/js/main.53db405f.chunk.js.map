{"version":3,"sources":["SearchBox.js","Card.js","CardList.js","Scroll.js","ErrorBoundary.js","App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Card","props","alt","src","id","name","email","CardList","robots","cardArray","map","user","i","key","StrictMode","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.53db405f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange})=>{\r\n    return(\r\n        <div className='pa2'>\r\n            <input \r\n            className='pa3 ba b--green bg-lightest-blue' \r\n            type=\"search\" \r\n            placeholder=\"search robots\"\r\n            onChange={searchChange}>\r\n\r\n            </input>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card=(props) =>{\r\n    return(\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${props.id}?200x200`}></img>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList=({robots})=>{\r\n    const cardArray=robots.map((user,i)=>{\r\n        return <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n    })\r\n    return(\r\n        <React.StrictMode>\r\n    <div>\r\n        {cardArray}\r\n    </div>\r\n  </React.StrictMode>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n    return(\r\n        <div style={{overflowY:'scroll',border:'1px solid black',height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true});\r\n    }\r\n\r\n    render(){\r\n            if(this.state.hasError){\r\n                return <h1>Not good</h1>\r\n            }\r\n            return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n//import {robots} from './robots';\r\nimport SearchBox from './SearchBox.js';\r\nimport CardList from './CardList';\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundary from './ErrorBoundary';\r\nimport './App.css';\r\n\r\nimport {setSearchField,requestRobots} from './actions'; \r\n\r\nconst mapStateToProps=(state)=>{\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps=(dispatch)=>{\r\n    return{\r\n    onSearchChange: (event)=> dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: ()=>dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends React.Component{\r\n\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    // onSearchChange=(event)=>{\r\n    //     this.setState({searchField: event.target.value});\r\n        \r\n        \r\n    // }\r\n    \r\n    render(){\r\n    const {searchField, onSearchChange,robots,isPending}=this.props;\r\n    const filteredRobots=robots.filter(robot =>{\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    if(isPending){\r\n        return <h1>LOADING</h1>\r\n    }\r\n    else{\r\n    //return filteredRobots.length?filteredRobots:{};\r\n        return(\r\n            <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox searchChange={onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n   \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_PENDING\r\n} from './constants.js'\r\n\r\nexport const setSearchField=(text)=>({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots=() => (dispatch) => {\r\n    dispatch({type:REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=>response.json())\r\n    .then(data=> dispatch({type:REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error=>dispatch({type: REQUEST_ROBOTS_FAILED,payload:error}));\r\n}","export const CHANGE_SEARCH_FIELD= 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_PENDING\r\n} from './constants.js'\r\n\r\nconst initialStateSearch={\r\n    searchField:''\r\n}\r\n\r\nexport const searchRobots=(state=initialStateSearch,action={})=>{\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},state,{searchField:action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots={\r\n    isPending: false,\r\n    robots:[],\r\n    error:''\r\n}\r\n\r\nexport const requestRobots=(state=initialStateRobots,action={})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},state,{isPending:true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({},state,{robots: action.payload, isPending:false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({},state,{error:action.payload, isPending:false})\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './App';\n// import Card from './Card';\n//import CardList from './CardList'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {searchRobots,requestRobots} from './reducers';\n//import {robots} from './robots';\n\nconst logger=createLogger();\n\nconst rootReducers=combineReducers({searchRobots,requestRobots});\nconst store=createStore(rootReducers,applyMiddleware(thunkMiddleware,logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}